<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd ">

    <!-- 配置shiro的过滤器工厂类，id- shiroFilter要和我们在web.xml中配置的过滤器一致 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 调用我们配置的权限管理器 -->
        <property name="securityManager" ref="securityManager" />
        <!-- 配置我们的登录请求地址 -->
        <property name="loginUrl" value="/api/login" />
        <!-- 如果您请求的资源不再您的权限范围，则跳转请求地址-->
        <property name="unauthorizedUrl" value="/Error/**" />
        <!--重要-->
        <!-- 自定义filter既自己的拦截器 -->
        <property name="filters">
            <map>
                <entry key="authc">
                    <bean class="teach.common.jwtUtil.JwtFilter"></bean>
                </entry>
            </map>
        </property>
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>
        <!-- 权限配置 -->
<!--        <property name="filterChainDefinitions">-->
<!--            <value>-->
<!--                &lt;!&ndash; anon表示此地址不需要任何权限即可访问,authc需要验证 &ndash;&gt;-->
<!--                /login.jsp=anon-->
<!--                /index.jsp=anon-->
<!--                /notoken=anon-->
<!--                /unauthorized=anon-->
<!--                /api/getOpenId=authc-->
<!--                /logout=logout-->
<!--                &lt;!&ndash;所有的请求(除去配置的静态资源请求或请求地址为anon的请求)都要通过登录验证,如果未登录则跳到/login &ndash;&gt;-->
<!--                /** = authc-->
<!--            </value>-->
<!--        </property>-->
    </bean>
    <!-- 禁用掉会话调度器,使用自己的JWT -->
    <bean id="sessionManager" class="org.apache.shiro.session.mgt.DefaultSessionManager">
        <property name="sessionValidationSchedulerEnabled" value="false"/>
    </bean>
    <!--解决报错，组装默认的subjectDAO-->
    <bean id="subjectDAO" class="org.apache.shiro.mgt.DefaultSubjectDAO">
        <property name="sessionStorageEvaluator" ref="sessionStorageEvaluator"/>
    </bean>
    <bean id="sessionStorageEvaluator" class="org.apache.shiro.mgt.DefaultSessionStorageEvaluator">
        <property name="sessionStorageEnabled" value="false"/>
    </bean>
    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="shiroRealm"/>
        <property name="subjectDAO" ref="subjectDAO"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>
    <!--重要-->
    <!-- 自定义Realm实现,既处理授权逻辑 -->
    <bean id="shiroRealm" class="teach.common.jwtUtil.ShiroRealm"/>
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 配置一个 bean, 该 bean 实际上是一个 Map. 通过实例工厂方法的方式 -->
    <bean id="filterChainDefinitionMap"
          factory-bean="filterChainDefinitionMapBuilder" factory-method="buildFilterChainDefinitionMap"></bean>

    <bean id="filterChainDefinitionMapBuilder"
          class="teach.common.factory.FilterChainDefinitionMapBuilder"></bean>


</beans>